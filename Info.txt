this is a registration form

step01:
PS D:\hack\RegistrationForm> npm init -y
Wrote to D:\hack\RegistrationForm\package.json:

{
  "name": "registrationform",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}
PS D:\hack\RegistrationForm> npm install express dotenv body-parser mongoose socket.io

added 109 packages, and audited 110 packages in 10s

15 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

step02:
index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hackathon Registration & Real-Time Collaboration</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f0f4f8;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      flex-direction: column;
    }


    .container {
      background-color: #fff;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      width: 100%;
      max-width: 400px;
      margin-bottom: 30px;
    }


    h1 {
      text-align: center;
      color: #4CAF50;
      margin-bottom: 20px;
    }


    .form-group {
      margin-bottom: 20px;
    }


    .form-group input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
      transition: border-color 0.3s ease;
    }


    .form-group input:focus {
      border-color: #4CAF50;
      outline: none;
    }


    .form-group input::placeholder {
      color: #888;
    }


    .form-group button {
      width: 100%;
      padding: 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 18px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }


    .form-group button:hover {
      background-color: #45a049;
    }


    .form-group button:active {
      background-color: #388e3c;
    }


    .form-group p {
      text-align: center;
      font-size: 14px;
      color: #555;
    }


    .form-group p a {
      color: #4CAF50;
      text-decoration: none;
    }


    .form-group p a:hover {
      text-decoration: underline;
    }


    @media (max-width: 480px) {
      .container {
        padding: 20px;
      }


      h1 {
        font-size: 24px;
      }


      .form-group button {
        font-size: 16px;
      }
    }
  </style>
</head>
<body>


  <!-- Hackathon Registration Form -->
  <div class="container">
    <h1>Hackathon Registration</h1>
    <form action="/submit" method="POST">
      <div class="form-group">
        <input type="text" name="name" placeholder="Name" required />
      </div>
      <div class="form-group">
        <input type="text" name="rollno" placeholder="Roll No" required />
      </div>
      <div class="form-group">
        <input type="text" name="branch" placeholder="Branch" required />
      </div>
      <div class="form-group">
        <input type="text" name="college" placeholder="College" required />
      </div>
      <div class="form-group">
        <input type="text" name="phno" placeholder="Phone Number" required />
      </div>
      <div class="form-group">
        <button type="submit">Register</button>
      </div>
      <div class="form-group">
        <p>Already registered? <a href="#">Login here</a></p>
      </div>
    </form>
  </div>


  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();


    // Handle form submission for real-time collaboration
    document.getElementById('dataForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const data = {
        name: document.getElementById('name').value,
        rollno: document.getElementById('rollno').value,
        branch: document.getElementById('branch').value,
        college: document.getElementById('college').value,
        phno: document.getElementById('phno').value,
      };


      // Send the data to the server via a POST request
      fetch('/submit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
    });


    // Listen for real-time updates from the server
    socket.on('update', (data) => {
      const updatesDiv = document.getElementById('updates');
      updatesDiv.innerHTML += `<p>${JSON.stringify(data)}</p>`;
    });
  </script>


</body>
</html>

server.js
// Import required modules
const express = require("express"); // Express framework for handling HTTP requests
const dotenv = require("dotenv"); // dotenv module to manage environment variables
const bodyParser = require("body-parser"); // Middleware for parsing incoming request bodies
const path = require("path"); // Module to handle and transform file paths
const mongoose = require("mongoose"); // Mongoose for MongoDB object modeling
const http = require("http"); // Native HTTP module to create a server
const { Server } = require("socket.io"); // Socket.IO for real-time communication

// Load environment variables from a .env file
dotenv.config();

// Initialize the Express app
const app = express();

// Create an HTTP server to integrate with Socket.IO
const server = http.createServer(app);

// Attach Socket.IO to the HTTP server for real-time communication
const io = new Server(server);

// Middleware to parse JSON and URL-encoded data from client requests
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Define the server's port, using an environment variable if available, default to 3000
const PORT = process.env.PORT || 3000;

// MongoDB connection URI from environment variable, with a fallback URI for local setup
const mongoURI = process.env.MONGO_URI || "your-default-mongodb-uri-here";

// Connect to MongoDB using Mongoose
mongoose
  .connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true }) // Connection options for MongoDB
  .then(() => console.log("Connected to MongoDB")) // Log success
  .catch((err) => console.error("Error connecting to MongoDB:", err)); // Log error if connection fails

// Define the schema for the form responses
const responseSchema = new mongoose.Schema({
  name: { type: String, required: true }, // Name field, required
  rollno: { type: String, required: true }, // Roll number field, required
  branch: { type: String, required: true }, // Branch field, required
  college: { type: String, required: true }, // College field, required
  phno: { type: String, required: true }, // Phone number field, required
  timestamp: { type: Date, default: Date.now }, // Timestamp for when the response was created
});

// Create a Mongoose model based on the schema
const Response = mongoose.model("Response", responseSchema);

// Serve the index.html file when the root route is accessed
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "index.html")); // Send the HTML file in the response
});

// Handle the form submission at the /submit route (POST request)
app.post("/submit", async (req, res) => {
  // Destructure the incoming request body to get form data
  const { name, rollno, branch, college, phno } = req.body;

  // Check if all required fields are provided
  if (!name || !rollno || !branch || !college || !phno) {
    return res.status(400).json({ message: "All fields are required." }); // Send a 400 error if any field is missing
  }

  try {
    // Create a new response document using the data received from the client
    const response = new Response({ name, rollno, branch, college, phno });

    // Save the response to the database and await the result
    const savedResponse = await response.save();

    // Log the saved response to the console
    console.log("Data saved to MongoDB:", savedResponse);

    // Emit an 'update' event to all connected clients with the saved response data
    io.emit("update", savedResponse);

    // Send a success response with the saved data to the client
    res.status(200).json({
      message: "Data received and saved successfully!",
      data: savedResponse,
    });
  } catch (error) {
    // Log any errors that occur during data saving
    console.error("Error saving data to MongoDB:", error);

    // Send a 500 error response if there was a failure in saving data
    res.status(500).json({ message: "Failed to save data." });
  }
});

// Socket.IO connection event: Fired when a client connects to the server
io.on("connection", (socket) => {
  // Log the client ID when a new client connects
  console.log("A client connected:", socket.id);

  // Listen for an 'edit' event from the client (for real-time updates)
  socket.on("edit", async (data) => {
    try {
      // Find the response by ID and update it with the new data
      const updatedResponse = await Response.findByIdAndUpdate(data._id, data, {
        new: true,
      });

      // If the response was updated, broadcast the updated data to all connected clients
      if (updatedResponse) {
        io.emit("update", updatedResponse);
      }
    } catch (error) {
      // Log any errors that occur during the update process
      console.error("Error updating data:", error);
    }
  });

  // Handle the disconnection of a client
  socket.on("disconnect", () => {
    // Log when a client disconnects
    console.log("A client disconnected:", socket.id);
  });
});

// Start the server and listen on the defined port
server.listen(PORT, () => {
  // Log the server startup message
  console.log(`Server is running on http://localhost:${PORT}`);
});

.env
PORT = 5000
MONGO_URI= <.........>

.gitignore
# Ignore package-lock.json and package.json
package-lock.json
package.json
# Node.js
node_modules/
npm-debug.log
.env
coverage/
# Build directories
dist/
build/
# IDE or editor settings
.vscode/
.idea/
*.sublime-workspace
# Operating system files
.DS_Store
Thumbs.db

step03
PS D:\hack\RegistrationForm> node server.js
(node:22292) [MONGODB DRIVER] Warning: useNewUrlParser is a deprecated option: useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version
(Use `node --trace-warnings ...` to show where the warning was created)
(node:22292) [MONGODB DRIVER] Warning: useUnifiedTopology is a deprecated option: useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version
Server is running on http://localhost:5000
Connected to MongoDB
A client connected: FvpFm3iqoH_UdebfAAAB
A client disconnected: FvpFm3iqoH_UdebfAAAB